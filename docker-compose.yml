version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - javelin

  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
    depends_on:
      - zookeeper
    networks:
      - javelin

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - 5433:5432
    networks:
      - javelin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  writer-data-migration:
    depends_on:
      postgres:
        condition: service_healthy
    image: homecqrs/writer-data-migration
    container_name: writer-data-migration
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?user=postgres&password=password
    ports:
      - 5001:5001
    networks:
      - javelin

  writer:
    image: homecqrs/writer
    container_name: writer
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
    ports:
      - 8086:8086
    networks:
      - javelin

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - javelin

  reader:
    image: homecqrs/reader
    container_name: reader
    ports:
      - 8085:8085
    environment:
      MONGO_DB_URI: http://host.docker.internal:27017
    depends_on:
      - mongo
    networks:
      - javelin

  gateway-spring-cloud:
    image: homecqrs/gateway-spring-cloud:javelin-0.0.1-SNAPSHOT
    container_name: gateway
    #    Note that when you run app in Docker you should use host.docker.internal instead of localhost
    environment:
      READER_URI: http://host.docker.internal:8085
      WRITER_URI: http://host.docker.internal:8086
    ports:
      - "8088:8088"
    networks:
      - javelin

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - javelin


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  javelin:
    external: false
    name: javelin
    driver: bridge
